#!/usr/bin/env bash
# Author: Jim J_McDonald, Australia
#set -x
function Usage(){
cat << msg_end

 A test file generator that puts files in single directory or a directory tree. 
 Includes a calculator for creating data in directory trees. [Option -C]

 Minimum file number = 1, Minimum file size = 2 bytes.   
 File contents can be identical or individually filled with random content.
 File contents can either be printable or binary (from /dev/urandom). 
 Files sizes can be identical or randomly sized within a given range.
 This script can be run interactively or unaccompanied in batch/quiet mode. 
_______________________________________________________________________
CALCULATOR mode (interactive, tree only) 
$(basename $0) -C CALCULATOR MODE  
 User Inputs:
   Tree depth, tree width, number files per directory and file size
 Output:
   Summary, tables of data trees of current and smaller trees.
   Tables contain used data size and file numbers for each tree
_______________________________________________________________________
TEST FILE CREATION mode  

DEFAULTS
 File contents are random binary. Use -P or -D for creating compressable printable data  
 If all files same size then contents will be identical.  Use -r option to randomise printable file contents.
 A time stamped output directory is created in users current directory. 
 Interactive mode, requires confirmation to proceed after providing user with a summary. See examples.

OPTIONS: Manditory - See NOTES for more information
 -d Depth of tree, minimum -d 1 (a single directory)
 -f or -l File size, minimum 2 bytes  
 -n Number of files in each directory

DIRECTORY LAYOUT OPTIONS
    n is a number, minimum is 1  
 -n n   Number of files in each directory.  
 -d n   Depth. How many directories deep.   
 -w n   Width. How many directories wide.  
Create single directory: -d 1 (-w if set, will be ignored) 
Create tree of directories: 
   Depth min is -d 2  
   Width min is -w 1 and manditory  

FILE SIZE OPTIONS
 File sizes have to be designated by B, K, M or G
 Minimum is 2B (2 bytes).
 Example 2KiB = 2K, 3MiB = 3M 4GiB = 4G   

 -f Fixed file size, default [usage: -f 2K]  
 -r Random content is generated individually for every file. 
    Optional, only used with the -f option  

Random size - All files individually filled with random content. 
 -s Smallest file size.
 -l Largest file size. 
 If -s is omitted, the random range starts at 
    2B (2 bytes) if largest file size is <1G 
    1M (1MiB) if largest file size is >= 1G

OPTIONS: Optional
 -P n Selects the pool of printable characters from the ASCI set. Where n is a nuber in the range 1 to 95.
    n = 1 files only contain the uppercase 'A' 
    n = 2 to 26 files only contain lowercase Latin alphabet characters
    n >26 files contain printable ASCI characters. Max n = 95 

 -D n Select the pool of digit charcters from the ASCI set. Where n is a number in the range 1 to 10.
    n = 1 files only contain zeros '0' 
    n > 1 files contain digits. Max n = 10

 -o Output to directory that already exists.    
 -r Random content for fixed file sizes.    
 -b Batch/quiet mode. See examples below for the default interactive mode 
 -o Output to an existing directory.
    Creates a time stamped subdirectory directory for content.   
 -b Batch/quiet mode. See examples below for the default interactive mode 

LOGGING
None. In batch mode user has to redirect output to a file  
Progress indicated by time stamping every ten directories filled with files.
 
LIMITATIONS
Data creation terminaes before any data creation if: 
  The number of directories to be created exceeds 100 million
  The number of files to be created exceeds 100 million
  If the 'shuf' command is not available 
  if the -c option not avaiable for the 'head' command.

If the 'seq' command is not avaiable. The character pool will not be displayed in the initial summary. 

NOTES  
Binary data is generated from /dev/urandom. This data will not compress that well. 
Binary data that is storeed/transmitted may render data deduplication and compression ineffective.  

EXAMPLES 
$(basename $0) -P 28 -d 3 -w 5 -f 15M -n 50
  DIRECTORTY TREE each directory contains 5 directories and 50 files
  The tree is 3 levels deep
  Output: /home/ted/test/tfc_240930-1759-37
  All files with identical contents
  Files created are all 15M
  Storage used...... 22.71G (max potential)
  File Contents..... Random selection from the 28 char set: !"#$%&'()*+,-./0123456789:;<
  Total data directories........30
  Total data files............1550
Do you want to proceed? (y/n)

$(basename $0) -D 5 -d 1 -f 600K -n 1000 -r -o /home/ted/test
  SINGLE DIRECTORY conting 1000 files
  Output: /home/ted/test/tfc_240930-1802-53
  Random data created individually for all files
  Files created are all 600K
  Storage used...... 585.94M (max potential)
  File Contents..... Random selection from the 5 digit set: 01234
  Total data directories.........1
  Total data files............1000
Do you want to proceed? (y/n)
_______________________________________________________________________

Author: Jim J_McDonald, Australia

msg_end
} #_____________________________________________________
function Is_int(){
   num=$1
   if ! [[ $num =~ ^[0-9]+$ ]] ; then
      echo "$2 option requires a positive whole number, decimals permitted"
      exit 1
   elif ((num == 0)) ; then
      echo "$2  0 not permitted, must be at least 1 "
      exit 1
   fi
} #_____________________________________________________
function Get_bytes(){
# returns bytes from input like 310B, 23K, 45M, 2G 
str=$1
count="$(echo $str | sed 's/.$//')"
if ! [[ $count =~ ^[0-9]+$ ]] ; then
   echo -1
   return
elif (( count == 0 )) ; then
   echo -1
   return
fi
unit="${str:(-1)}"
case $unit in
   B) echo $count ;; # Bytes
   K) echo $((count*(2**10)));; # KiB
   M) echo $((count*(2**20)));; # MiB
   G) echo $((count*(2**30)));; # GiB
   *) echo -1  ;;
esac
} #_____________________________________________________
function Valid_size(){
  valid=$(Get_bytes $1)
  if (( valid == -1 )); then 
    echo "${1} is not valid value for ${2}" 	  
    exit 1
  fi
} #_____________________________________________________
function Bytes_to_str(){
# conveetes bytes to useful units like  310B, 23K, 45M, 2G 
  used=$1
  one_KB=$((2**10))
  one_MB=$((2**20))
  one_GB=$((2**30))
  one_TB=$((2**40))
  one_PB=$((2**50))
  if (( used <= 0 ));then # integer wrap around
    printf ">100P"
    return
  fi 
  if ((used < one_KB)); then
     echo "${used}B"
  elif (( used >= one_KB)) && (( used < one_MB)); then
     echo $used | awk -v unit=$one_KB '{printf "%.2fK",$1/unit}'
  elif (( used >= one_MB)) && (( used < one_GB)); then
     echo $used | awk -v unit=$one_MB '{printf "%.2fM",$1/unit}'
  elif (( used >= one_GB)) && (( used < one_TB)); then
     echo $used | awk -v unit=$one_GB '{printf "%.2fG",$1/unit}'
  elif (( used >= one_GB)) && (( used < one_PB)); then
     echo $used | awk -v unit=$one_TB '{printf "%.2fT",$1/unit}'
  elif (( used <= ( 100 * one_PB) )); then
     echo $used | awk -v unit=$one_PB '{printf "%.2fP",$1/unit}'
  else
    printf ">100P" 
  fi
} #___________________________________________________
Check_commands(){
   which shuf >/dev/null 2>&1 
   rc=$?
   if (( $rc != 0)); then
      echo "shuf command not available - add to path or install" 
      echo "shuf is required for random file sizes"
      exit 1
   fi  
  echo "This" | head -c 3 > /dev/null 2>&1
  rc=$?
   if (($rc != 0)); then
      echo "The -c option not avaialble for the 'head'  command" 
      echo "Required for generating files with printable content"
      echo "head -c is not available in Solaris" # AIX ok 
      exit 1
   fi   
   which seq >/dev/null 2>&1 
   rc=$?
   if (( $rc != 0)); then
      echo "seq command not available - add to path or install" 
      echo "shuf is required to display the printable character pool"
      echo "The seq command is not used in test file creation"
      echo; echo # apparently requires installtion on Centos 
   fi  
}
###### Calculator ############################################
function Width_print(){
  local width=$1
  local depth=$2
  local print_all=$3
  local files_per_dir=$4
  local size_per_file=$5
  current_depth=1
  t_size="0B"  # Zero Bytes
  dir_usage=$((files_per_dir*size_per_file))
  level_1_usage=$dir_usage
  previous_dir_count=0
  while ((current_depth<=depth)); do
     previous_dir_count=$(((width*previous_dir_count)+width))
     if ((files_per_dir>0)) && ((size_per_file==0)); then  # only return number files only
       info=$(((previous_dir_count * files_per_dir) + files_per_dir))
     elif ((files_per_dir>0)) && ((size_per_file>0)); then # only return storage usage
        if [ "$t_size" != ">100P" ] ; then # avoid integer wrap around   
           #t_size="$(Bytes_to_str $((previous_dir_count * dir_usage)))"
	   t_size="$(Bytes_to_str $(((previous_dir_count * dir_usage)+level_1_usage)))"
        fi
        echo $t_size
     else
        info=$previous_dir_count # only return directory count
     fi
     if (( info < 0 )); then # integer limit exceeded wrapped around
        info=">100M"
     elif ((info > 100000000));then
        info=">100M"
     fi
     [ $print_all == "y" ] && echo $info # print every value
     ((current_depth++))
  done
  [ $print_all != "y" ] && echo $info    # print only the total (last value)
} #___________________________________
function Print_tree_table(){
  local max_width=$1
  local max_depth=$2
  local files_dir=$3
  local size_file=$4
  printf "Tree Depth"
  for ((d=2;d<=$((max_depth+1));d++)); do # print title 
    printf "        %+2u" $d
  done 
  printf "\n          "
  for ((d=2;d<=$((max_depth+1));d++)); do # more title 
    printf -- "----------" 
  done 
  echo
  for ((w=1;w<=$max_width;w++)) ; do
    printf "Width %+3u |" $w 
    Width_print $w $max_depth y $files_dir $size_file | xargs printf "%10s"
    echo
  done
} #___________________________________
function Calculator (){
  local dir_count=0
  local file_count=0
  local total_usage=0
  local size_msg="File size requires units of B, K, M or G, the number must >1 decimals not permitted"
  clear
  cat << msg_stop
  
  $size_msg
  i.e. 750K 34M  2G and 10B (10 bytes)    
  
  NOTES: 
   Two bytes (2B) file size is the minimum to build a tree
   One byte is permitted here for information only    
   SINGLE DIRECTORY only, set Depth = 1  

msg_stop

  read -p " Data tree directry depth  (-d): " depth_tmp 
  Is_int $depth_tmp "Depth"
  read -p " Data tree directory width (-w): " c_width
  if ((depth_tmp > 1 )); then
    Is_int $c_width "Width"
  fi  
  read -p " Files per directory       (-n): " c_file_num
  Is_int $c_file_num "File count"
  read -p " Size per file       (-f or -l): " c_file_size_tmp
  c_file_size=$(Get_bytes $c_file_size_tmp)
  if (( c_file_size == -1 )) ; then
     echo "$size_msg " 
     return
  fi
  if (( depth_tmp == 1 )); then
     echo; echo "   A directory containing $c_file_num files, each $(Bytes_to_str $c_file_size)"
     echo "   Total usage $(Bytes_to_str $((c_file_num * $c_file_size)))"
     echo
     if ((c_width > 0 )); then
        echo "   *** Single directory with no subdirectories, Tree Width input of $c_width ignored ***"
     fi   
     return
  fi
  c_depth=$((depth_tmp - 1))
  dir_count=$(Width_print $c_width $c_depth n )
  printf "\n Total number of directories : %+10s\n"  $dir_count
  if [ $dir_count == ">100M" ] ; then
     printf " Total number of files       :      >100M\n"
  else
     file_count=$(((dir_count * c_file_num)+ c_file_num))
     if (($file_count > 100000000)) || (( $file_count < 0 )); then
         printf " Total number of files       :      >100M\n"
     else
         printf " Total number of files       : %+10u\n" $file_count
     fi
  fi
  if [ $dir_count == ">100M" ]  ; then 
     printf " Total file storage usage    : check SHOW DETAILS below\n"
  else
     #total_usage=$((dir_count * c_file_num * c_file_size))
     total_usage=$(((dir_count * c_file_num * c_file_size) + (c_file_size * c_file_num)))
     if (( total_usage > 0 )) ;then 
        printf " Total file storage usage    : %+11s \n" "$(Bytes_to_str $total_usage)"
     fi 
  fi
  echo
  read -p " SHOW DETAILS - Tree tables [y/n] " more_info
  if [[ $more_info != "n" ]] ; then #
     cat << msg_end	  
_____________________________________________________
Tables of current selection and smaller trees.   
Tree tables will wrap with small window 
At full sreen tree depth >17 output will probably wrap and be messy

Top Level directory (tree depth = 1) total file usage $(Bytes_to_str $((c_file_num * $c_file_size)))
    This directory contains $c_file_num files, each $(Bytes_to_str $c_file_size)
    Content counts and storage used by this top level is constant 
    and unaffected by subdirectory count (tree width)

msg_end
     printf "\n%12s Directory count for each tree\n"  
     Print_tree_table $c_width $c_depth 0 0
     printf "\n%12s File count for each tree\n" 
     Print_tree_table $c_width $c_depth $c_file_num 0
     printf "\n%12s File storage usage for each tree\n" 
     Print_tree_table $c_width $c_depth $c_file_num $c_file_size
     echo
  fi
}
###### Calculator  End ############################################
###################################################################
###### Make Directory Tree and fill it with files #################
Make_tree_list(){
  local depth=$1
  local width=$2
  local start_dir=$3
  local dir_path=($start_dir)
  for ((d=1; d<=depth; d++)); do
     temp=()
     for i in ${dir_path[@]}; do
        temp_wide=()
        for ((w=1; w<=$width; w++)); do
           echo $i/$w
           temp+=($i/$w)
        done
        temp_wide+=(${temp[@]})
     done
       dir_path=(${temp_wide[@]})
  done
}
###  Make files for directory tree #############################
#---- Fill directory tree will identical binary files ---------
function Make_tree_bin_copies(){
  local outdir=$1
  local f_num=$2
  local f_size=$3
  local progress=0 
  f_reference=${outdir}/f_tmp
  local big_file=$((2**30)) # 1GiB

  if (( f_size > big_file )); then
      bsize=1048576 # 1024k, a work around for non-GNU dd
      bcount=$((f_size/bsize))
  else
      bsize=$f_size
      bcount=1
  fi
  dd bs=$bsize count=$bcount if=/dev/urandom of=$f_reference >/dev/null 2>&1
  # fill tree with copies of reference file
  while read dir ; do
     for (( i=1; i <= $f_num ; i++ )) ;  do
       cp ${f_reference} ${dir}/file_$i   
     done
   echo -n "."
   ((progress++))
   (( ((progress % 10) + 1) == 1 )) && echo " ${progress} directories filled $(date)"
  done< <(find $outdir -type d -print)
  rm $f_reference
}   
#-- Fill directory tree will random-sized binary files --
function Make_tree_bin(){
  local outdir=$1
  local f_num=$2
  local size_min=$3
  local size_max=$4
  local progress=0 
  local big_file=$(((2**30)*1)) # 2GiB
  while read dir ; do
     for (( i=1; i <= $f_num ; i++ )) ;  do
        if (( size_max > big_file )); then
           bsize=1048576 # 1024, a work around for non-GNU dd 
           bcount_min=$((size_min/bsize))
           bcount_max=$((size_max/bsize))
           bcount=$(shuf -i ${bcount_min}-${bcount_max} -n1)
        else
           bsize=$(shuf -i ${size_min}-${size_max} -n1)
           bcount=1
        fi
        dd bs=$bsize count=$bcount if=/dev/urandom of=${dir}/file_$i >/dev/null 2>&1
    done
   echo -n "."
   ((progress++))
   (( ((progress % 10) + 1) == 1 )) && echo " ${progress} directories filled $(date)"
  done< <(find $outdir -type d -print)
}   
#--- Fill directory tree with identical files of printable chars -------
# Files can be filled with only "A" or "0" (zero) or random chars 
function Make_tree_printable_copies(){
  local outdir=$1
  local f_num=$2
  local bsize=$3
  printables=$4
  local progress=0 
  ## Make reference file
  f_reference=${outdir}/f_tmp
  tr -d -c $printables < /dev/urandom | head -c $bsize >$f_reference 2>/dev/null 
  # Fill tree with copies of reference file
  while read dir ; do
     for (( i=1; i <= $f_num ; i++ )) ;  do
       cp ${f_reference} ${dir}/file_$i   
     done
   echo -n "."
   ((progress++))
   (( ((progress % 10) + 1) == 1 )) && echo " ${progress} directories filled $(date)"
  done< <(find $outdir -type d -print)
  rm $f_reference
}   
#-- Fill directory tree will random-sized printable files ---
function Make_tree_printables(){
  local outdir=$1
  local f_num=$2
  local size_min=$3
  local size_max=$4
  printables=$5
  local progress=0 
  while read dir ; do
    for (( i=1; i <= $f_num ; i++ )) ;  do
       bsize=$(shuf -i ${size_min}-${size_max} -n1)
       tr -d -c $printables < /dev/urandom | head -c $bsize >${dir}/file_$i 2>/dev/null 
    done
   echo -n "."
   ((progress++))
   (( ((progress % 10) + 1) == 1 )) && echo " ${progress} directories filled $(date)"
  done< <(find $outdir -type d -print)
}   
#------------------------------------------------------------
##### MAIN ##################################################
#
if [[ $1 == "-C" ]] ; then
   while true ; do
     Calculator
     read -p " Run again [y/n]" again
     [ $again == "n" ] && exit
   done
fi
# Now creating data, not calculating
if [[ $# -eq 0 ]] || [[ $# -lt 6 ]]; then
 echo "Requires at least -d -n and -f or -l to be set. For more info run with -h" 
  exit 1
fi
Check_commands # are are avaialbe? 
# _________________________________

now=$(date +%y%m%d-%H%M-%S)
start=$(date)
# Some defaults
file_num=0
copy_mode="Y"
copy_msg="All files with identical contents"    
content_msg="File contents binary, mostly unprintable" 
check="Y" 
output_tmp=$PWD
bin_data="Y"
depth_tmp=""
width=""
data="BIN"

while getopts ":P:D:d:w:n::o:f:s:l:br" opt; do
      case $opt in
        P) if (($OPTARG < 1 )) || (($OPTARG > 95 ));then
              echo " -P requires a number 1-95" ; exit
           else
	      data="ALPHA"
	      Check_commands
	      char_max=$OPTARG
           fi ;; # All file data is printable chars	      
        D) if (($OPTARG < 1 )) || (($OPTARG > 10 ));then
              echo " -D requires a number 1-10" ; exit
           else
	      data="DIGIT"
	      Check_commands
	      char_max=$OPTARG
           fi ;; # All file data is printable digits	      
        d) Is_int $OPTARG "-d" && depth_tmp="$OPTARG"  ;;
        w) Is_int $OPTARG "-w" && width="$OPTARG"  ;;
        n) Is_int $OPTARG "-n" && file_num="$OPTARG" ;;  
        f) Valid_size $OPTARG "-f" && fixed="$OPTARG"    ;; # fixed file size
        s) Valid_size $OPTARG "-s" && smallest="$OPTARG" ;; # min file size
        l) Valid_size $OPTARG "-l" && largest="$OPTARG"  ;; # max file size
        o) output_tmp=${OPTARG}  ;; # output dir, default $PWD;
        r) copy_mode="N" ; Check_commands ; copy_msg="Random data created individualy for all files" ;;    
        b) check="N" ;; # batch mode, no user checking before run
        :) echo -e "An option requires an argument." ; exit 1 ;;
        *) Usage ; exit 1;;
      esac
done
if [[ $depth_tmp == "" ]] ; then 
    echo "Depth is manditory: -d is not set"
    exit 1
fi    
if (( file_num == 0 )) ; then 
    echo "Number of files per directory is manditory: -n is not set"
    exit 1
fi    
if [[ -z "$fixed" ]] && [[ -z "$largest" ]]; then 
    echo "File Size is manditory: -f or -l is not set"
    exit 1
fi    
## SET Printable char range
if [ $data == "ALPHA" ] ; then 
  if (( char_max == 1 )); then
     content_msg="Sequence of only uppercase A characters" 
     char_range="A"
     copy_mode="Y"
  elif (( $char_max <= 26 )) ; then # use lowercase alphabet
     char_end=$(echo $((96+$char_max )) | awk '{printf("%c",$1)}')
     char_range="a-$char_end"
     char_sequence="97 $((96+char_max ))"
     content_msg="Random selection from a $char_max char set: $(seq $char_sequence | awk '{printf("%c",$1)}')" 
  elif (( char_max == 60 )); then # the special case of "\" the escape char
     char_range="\!-\\\\\\\\"
     char_sequence="33 92"
     content_msg="Random selection from a $char_max char char set: $(seq 33 92 | awk '{printf("%c",$1)}')" 
  else    
     char_end=$(echo $((33+char_max )) | awk '{printf("%c",$1)}')
     char_range="\!-$char_end"
     char_sequence="33 $((32+char_max))"
     content_msg="Random selection from a $char_max char set: $(seq $char_sequence | awk '{printf("%c",$1)}')" 
  fi
elif [ $data == "DIGIT" ]; then
   if (( char_max == 1 )); then
	   content_msg="Sequence of only number zero '0' characters " 
     char_range=0  
     copy_mode="Y"
   else  
     char_end=$(echo $((47 + $char_max )) | awk '{printf("%c",$1)}')
     char_range="0-$char_end"
     char_sequence="48 $((47+char_max))"
     content_msg="Random selection from a $char_max digit set: $(seq $char_sequence | awk '{printf("%c",$1)}')" 
   fi    
fi   
# if not given a valid output directory set it to the default ($PWD)
if [ ! -d "$output_tmp" ]; then
  echo "Requires the output directory to exist"
  exit 1
else
  output_dir=${output_tmp}/tfc_$now
fi 
tree_dir=${output_dir}
## CHECK File size inputs #######################
size_fail_msg="Random file sizes require both -s (smallest) and -l (largest) and -s has to be smaller than -l"
if [ ! -z "$fixed" ] ; then 
   min_size=$(Get_bytes $fixed)
   if (( min_size == 1 )) ; then
      echo "Require a size of at least 2B (2 bytes) " && exit 1
   else # and if -s or -l also set, they are ignored
      file_size_msg="Files created are all ${fixed}"  
   fi 
   max_size=$min_size 
elif [ ! -z "$smallest" ] && [  -z "$largest" ] ; then 
   echo "$size_fail_msg" && exit 1
elif [ ! -z "$smallest" ] && [ ! -z "$largest" ] ; then 
   min_size=$(Get_bytes $smallest)
   max_size=$(Get_bytes $largest)
   if (( min_size > max_size )) ; then 
      echo "$size_fail_msg" && exit 1
   fi  
   file_size_msg="Files created in a size range ${smallest} to ${largest}"  
   copy_mode="N"
elif [ ! -z "$largest" ] ; then
   max_size=$(Get_bytes $largest)
   min_size=2
   file_size_msg="Files created in a size range with no lower limit set to max of $(Bytes_to_str ${max_size})."  
   copy_mode="N"
fi
if [ "$copy_mode" != "Y" ] ;then
   copy_msg="File contents individually generated for each file"  
fi 
### TREE stuff ####################################
if [[ $depth_tmp == "" ]];then
   echo "-d option is manditory"
   exit 1
fi
if [[ $width == "" ]] && [[ $depth_tmp -ne "1" ]] ;then
   echo "-w option required when tree depth is >1"
   exit 1
fi
depth=$((depth_tmp - 1))
if ((depth != 0 )); then 
  total_dirs=$(Width_print $width $depth n 0 0)
  file_count=$(((total_dirs * file_num) + file_num))  
else 
  total_dirs=1    	
  width=0
  file_count=$file_num
fi  
if [ $total_dirs == ">100M" ] ; then    
   printf " Total number of files      :      >100M\n" 
   printf " Total storage usage        :      >100M\n" 
   printf " LIMITS EXCEEDED \n"  
   exit 1    
fi
if (( file_count < 0 )); then # reached integer limit  
   printf " Total number of files      :      >100M\n" 
   printf " LIMIT EXCEEDED \n"  
   exit 1    
fi
max_used=$((file_count * max_size))
if (( max_used <= 0 )) ;then
  printf " Total storage usage        :      >100P\n" 
  printf " LIMIT EXCEEDED \n" 
  exit 1    
fi 
if ((depth == 0)); then 
  dir_msg="SINGLE DIRECTORY containing $file_num files" 	
  tree_msg=""
else  
  dir_msg="DIRECTORTY TREE each directory contains $width directories and $file_num files "
  tree_msg="The tree is $depth_tmp levels deep"
fi  
max_used_msg=$(Bytes_to_str $max_used)
### Checks and setup complete #################
cat << msg_done

  $dir_msg 
  $tree_msg
  Output: $output_dir
   
  $copy_msg
  $file_size_msg
  Storage used...... $max_used_msg (max potential)  
  File Contents..... $content_msg 

  Total data directories.$(printf "%9s" $total_dirs|tr ' ' .) 
  Total data files.......$(printf "%9s" $file_count|tr ' ' .) 

msg_done

if [ "$check" == "Y" ] ; then
   while true; do
     read -p "Do you want to proceed? (y/n) " answer
     case $answer in 
       y|Y) break;;
       n|N) echo "Bye"; exit;;
        * ) echo "Require y or n" ;;
     esac
  done
  printf  "\n *** Early termination requires manual deletion of data created **** \n"
fi
mkdir -p $tree_dir  
echo "Start $(date)" 
if ((depth != 0)); then # Make directory tree
   Make_tree_list  $depth $width $tree_dir | xargs mkdir -p
fi 
# now fill tree with files
if [ $data == "BIN" ] ;then # fill file with binary data
   if [ $copy_mode == "Y" ] ; then  # All files are the same
      Make_tree_bin_copies $tree_dir $file_num $max_size 
   else  # All files with individually generated contents
      Make_tree_bin $tree_dir $file_num $min_size $max_size 
   fi
else # fill files with printable charcters
   if [ $copy_mode == "Y" ] ; then  # All files are the same
      Make_tree_printable_copies $tree_dir $file_num $max_size $char_range 
   else  # All files with individually generated contents
      Make_tree_printables $tree_dir $file_num $min_size $max_size $char_range
   fi
fi   
printf "\nFinish $(date)\n"
